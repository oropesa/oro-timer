name: Tag, Release, and Publish on PR Merge to Master

on:
  pull_request:
    types:
      - closed

jobs:
  branch_master:
    runs-on: ubuntu-latest
    outputs:
      is_merged: ${{ steps.check_merge.outputs.is_merged }}
    steps:
      - name: Check PR Merge Status on Master
        id: check_merge
        if: github.event.pull_request.base.ref == 'branch_master' && github.event.pull_request.merged == true
        run: echo "is_merged=${{ github.event.pull_request.merged }}" >> $GITHUB_OUTPUT

  project_version:
    runs-on: ubuntu-latest
    needs: branch_master
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Install Node.js and jq
        if: needs.branch_master.outputs.is_merged == 'true'
        uses: actions/setup-node@v2
        with:
          node-version: 18

      - name: Get Version from package.json
        id: get_version
        if: needs.branch_master.outputs.is_merged == 'true'
        run: echo "version=$(jq -r .version package.json)" >> $GITHUB_OUTPUT

      - name: Check if Tag Exists
        if: needs.branch_master.outputs.is_merged == 'true'
        run: |
          tag="v${{ steps.get_version.outputs.version }}"
          if git rev-parse $tag >/dev/null 2>&1; then
            echo "::error::Tag v${{ steps.get_version.outputs.version }} already exists."
          fi

  tag:
    runs-on: ubuntu-latest
    needs: project_version
    steps:
      - name: Create and Push Tag
        env:
          PROJECT_VERSION: ${{needs.project_version.outputs.version}}
        if: needs.branch_master.outputs.is_merged == 'true'
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git tag -a "v${{ $PROJECT_VERSION }}" -m "Release v${{ $PROJECT_VERSION }}"
          git push origin "v${{ $PROJECT_VERSION }}"

  release:
    runs-on: ubuntu-latest
    needs: tag
    steps:
      - name: Create GitHub Release
        env:
          PROJECT_VERSION: ${{needs.project_version.outputs.version}}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: needs.branch_master.outputs.is_merged == 'true'
        run: |
          gh release create "v${{ $PROJECT_VERSION }}" "dist/*" --title "Release v${{ $PROJECT_VERSION }}" --notes "Release notes for v${{ $PROJECT_VERSION }}"

  publish:
    runs-on: ubuntu-latest
    needs: release
    steps:
      - name: Publish as NPM Package
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
        if: needs.branch_master.outputs.is_merged == 'true'
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_AUTH_TOKEN }}" > ~/.npmrc
          npm publish
